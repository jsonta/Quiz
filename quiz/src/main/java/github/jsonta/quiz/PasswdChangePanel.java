package github.jsonta.quiz;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;

public class PasswdChangePanel extends JPanel implements ThreadCompleteListener, WindowListener {
    public PasswdChangePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestPwdRstBttn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        emailTextField = new javax.swing.JTextField();
        currentPwdField = new javax.swing.JPasswordField();
        newPwdField = new javax.swing.JPasswordField();
        newPwdConfirmField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        requestPwdRstBttn.setText("Zmień hasło");
        requestPwdRstBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestPwdRstBttnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        emailTextField.setEditable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("E-mail");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Stare hasło");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nowe hasło");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Potwierdź nowe hasło");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newPwdConfirmField, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(newPwdField)
                    .addComponent(currentPwdField)
                    .addComponent(emailTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentPwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPwdConfirmField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestPwdRstBttn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(requestPwdRstBttn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestPwdRstBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestPwdRstBttnActionPerformed
        uiControl(false);
        
        StringBuilder validationErrors = new StringBuilder();
        String pwdOld, pwdNew, pwdNewConf;
        boolean pwdOldValid, pwdNewValid;
        
        pwdOld = new String(currentPwdField.getPassword());
        pwdNew = new String(newPwdField.getPassword());
        pwdNewConf = new String(newPwdConfirmField.getPassword());
        
        if (!pwdOld.isEmpty()) {
            if (pwdOld.length() >= 6) {
                Matcher m = paswdRegex.matcher(pwdOld);
                if (m.find())
                    pwdOldValid = true;
                else {
                    pwdOldValid = false;
                    validationErrors.append("Stare hasło musi zawierać co najmniej jeden (1) znak specjalny.\n");
                }
            } else {
                pwdOldValid = false;
                validationErrors.append("Stare hasło musi składać się z co najmniej 6 znaków.\n");
            }
        } else {
            pwdOldValid = false;
            validationErrors.append("Proszę podać stare hasło.\n");
        }
        
        if (!pwdNew.isEmpty()) {
            if (pwdNew.length() >= 6) {
                if (!pwdNewConf.isEmpty()) {
                    if (pwdNew.equals(pwdNewConf)) {
                        Matcher m = paswdRegex.matcher(pwdNew);
                        if (m.find())
                            pwdNewValid = true;
                        else {
                            pwdNewValid = false;
                            validationErrors.append("Nowe hasło musi zawierać co najmniej jeden (1) znak specjalny.\n");
                        }
                    } else {
                        pwdNewValid = false;
                        validationErrors.append("Podane nowe hasła nie zgadzają się.\n");
                    }
                } else {
                    pwdNewValid = false;
                    validationErrors.append("Proszę podać jeszcze raz to samo hasło.\n");
                }
            } else {
                pwdNewValid = false;
                validationErrors.append("Nowe hasło musi składać się z co najmniej 6 znaków.\n");
            }
        } else {
            pwdNewValid = false;
            validationErrors.append("Proszę podać nowe hasło.\n");
        }
        
        if (pwdOldValid && pwdNewValid) {
            thread = new PasswdChangeThread(pwdOld, pwdNew, bearerAuth.toString());
            thread.setName("User password change");
            thread.addListener(this);
            thread.start();
        } else {
            JOptionPane.showMessageDialog(this.getRootPane(), validationErrors.toString(), "Komunikat", JOptionPane.ERROR_MESSAGE);
            uiControl(true);
        }
    }//GEN-LAST:event_requestPwdRstBttnActionPerformed
    
    public void setLoginObj(Login obj) {
        loginObj = obj;
    }
    
    private void uiControl(boolean flip) {
        currentPwdField.setEnabled(flip);
        newPwdField.setEnabled(flip);
        newPwdConfirmField.setEnabled(flip);
        requestPwdRstBttn.setEnabled(flip);
    }
    
    @Override
    public void notifyOfThreadComplete(Thread t) {
        if (t.getName().equals("User password change")) {
            JOptionPane.showMessageDialog(this.getRootPane(), this.thread.getStatus(), "Komunikat", JOptionPane.PLAIN_MESSAGE);
            uiControl(true);
            
            if (this.thread.getStatusCode() == 200)
                loginObj.setToken(this.thread.getToken());
        }
    }
    
    @Override
    public void windowOpened(WindowEvent e) {
        emailTextField.setText(loginObj.getLoggedInUser());
        bearerAuth = new StringBuilder("Bearer ");
        bearerAuth.append(loginObj.getToken());
    }

    @Override
    public void windowClosing(WindowEvent e) {}

    @Override
    public void windowClosed(WindowEvent e) {}

    @Override
    public void windowIconified(WindowEvent e) {}

    @Override
    public void windowDeiconified(WindowEvent e) {}

    @Override
    public void windowActivated(WindowEvent e) {}

    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    private Login loginObj;
    private StringBuilder bearerAuth;
    private final Pattern paswdRegex = Pattern.compile("[!@#$%^&*]+");
    private PasswdChangeThread thread;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField currentPwdField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField newPwdConfirmField;
    private javax.swing.JPasswordField newPwdField;
    private javax.swing.JButton requestPwdRstBttn;
    // End of variables declaration//GEN-END:variables
}
